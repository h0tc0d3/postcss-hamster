"use strict";

exports.__esModule = true;
/**
 * @module Helper
 * 
 * @description Constants and Help functions.
 * 
 * @version 1.0
 * @author Grigory Vasilyev <postcss.hamster@gmail.com> https://github.com/h0tc0d3
 * @copyright Copyright (c) 2017, Grigory Vasilyev
 * @license Apache License, Version 2.0, http://www.apache.org/licenses/LICENSE-2.0 
 */

function dotPos(value) {
    var len = value.length;
    do {
        len--;
        if (value.charCodeAt(len) === 46) {
            return len;
        }
    } while (len >= 0);
    return -1;
}

/**
 * Fast Format Float Values.
 * @param {number} value - input value.
 */

// . - 46 0 - 48
function formatValue(value) {
    value = value.toFixed(4);
    var pos = dotPos(value);
    if (pos > -1) {
        var len = value.length;
        var code = 0;
        do {
            len--;
            code = value.charCodeAt(len);
        } while (code === 48 && pos < len || code === 46 && pos === len);

        if (len + 1 === value.length) {
            return value;
        }

        var ret = new safeUint8Array(len + 1);
        for (var j = 0; j <= len; j++) {
            ret[j] = value.charCodeAt(j);
        }
        return String.fromCharCode.apply(null, ret);
    }
    return value;
}

/**
 * Format Number to Int.
 * @param {number} value - input value.
 */

function formatInt(value) {
    return value.toFixed(0);
}

/**
 * Unit List
 */
var UNIT = {
    PX: 1,
    EM: 2,
    REM: 3,
    PERCENT: 4,
    EX: 5,
    PT: 6,
    IN: 7
};

var unitName = ["", "px", "em", "rem", "%", "ex", "pt", "in"];

/**
 * Return Unit to value.
 * @param {string} value - input value.
 */
function getUnit(value) {
    var len = value.length;
    var code1 = value.charCodeAt(len - 1);
    var code2 = value.charCodeAt(len - 2);
    // p 80 112
    // x 88 120
    // t 84 116
    // e 69 101
    // m 77 109
    // r 82 114
    // i 73 105
    // n 78 110
    // % 37
    if (code1 === 37) {
        return UNIT.PERCENT;
    } else if (code2 === 80 || code2 === 112) {
        if (code1 === 88 || code1 === 120) {
            return UNIT.PX;
        } else if (code1 === 84 || code1 === 116) {
            return UNIT.PT;
        }
    } else if ((code1 === 77 || code1 === 109) && (code2 === 69 || code2 === 101)) {
        var code3 = value.charCodeAt(len - 3);
        if (code3 === 82 || code3 === 114) {
            return UNIT.REM;
        }
        return UNIT.EM;
    } else if ((code1 === 78 || code1 === 110) && (code2 === 73 || code2 === 105)) {
        UNIT.IN;
    }

    return 0;
}

/**
 * Regexp for rem value.
 */

var remRegexp = /([0-9\.]+)rem/i;

/**
 * Check value contains string;
 * @param {number} value - input value.
 */

function isHas(value, string) {
    return value.toLowerCase().indexOf(string) > -1;
}

/**
 * Copy Values from object 2 to object 1.
 * @param object1 
 * @param object2 
 * 
 * @return object1
 */
function extend(object1, object2) {

    for (var key in object2) {
        // if(object2.hasOwnProperty(key)){
        object1[key] = object2[key];
        // }
    }

    return object1;
}

var safeUint8Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

/**
 * To Camel Case string.
 * @param {string} value  - input string.
 */
function toCamelCase(value) {

    var len = value.length;
    var buffer = new safeUint8Array(len);

    // Code: 48-57 Chars: 0-9
    // Code: 65-90 Chars: A-Z 
    // Code: 97-122 Chars: a-z

    var prev = value.charCodeAt(0); // previous char
    var first = true; //is first char
    var count = 0;
    for (var i = 0; i < len; i++) {

        var code = value.charCodeAt(i);

        // Check code is not contain special characters
        if (!(code < 48 || code > 90 && code < 97 || code > 122)) {

            // Check code is not number
            if (!(code >= 48 && code <= 57)) {
                // Is lowercase
                if (code >= 97 && code <= 122) {

                    if (prev < 48 || prev > 90 && prev < 97 || prev > 122) {
                        code = code & 1 + 2 + 4 + 8 + 16 + 0 + 64 + 128; // toUpperCase
                    }
                } else {
                    if (!(prev >= 65 && prev <= 90) || first) {
                        code = code | 32; // toLowerCase
                        if (first) {
                            first = false;
                        }
                    }
                }
            }
            buffer[count] = code;
            count++;
        }
        prev = code;
    }
    var ret = new safeUint8Array(count);
    for (var j = 0; j < count; j++) {
        ret[j] = buffer[j];
    }
    return String.fromCharCode.apply(null, ret);
}

/**
 * To Kebab Case string.
 * @param {string} value  - input string.
 */

function toKebabCase(value) {
    var len = value.length;
    var count = 0;
    for (var i = 0; i < len; i++) {
        var code = value.charCodeAt(i);
        if (code >= 65 && code <= 90) {
            count++;
        }
    }
    var buffer = new safeUint8Array(len + count);
    var pos = 0;
    for (var _i = 0; _i < len; _i++) {
        var _code = value.charCodeAt(_i);
        if (_code >= 65 && _code <= 90) {
            buffer[pos] = 45;
            buffer[pos + 1] = _code | 32;
            pos += 2;
        } else {
            buffer[pos] = _code;
            pos++;
        }
    }
    return String.fromCharCode.apply(null, buffer);
}

/**
 * Check string contains number.
 * @param value - inputt string.
 */
function hasNumber(value) {
    var len = value.length;
    for (var i = 0; i < len; i++) {
        var code = value.charCodeAt(i);
        if (code >= 48 && code <= 57) {
            return true;
        }
    }
    return false;
}
/**
 * Compare input string with reference string.
 * @param str - input string
 * @param refStr - reference string
 */
function cmpStr(str, refStr) {

    //return str == refStr;
    var len = refStr.length;

    if (len !== str.length) {
        return false;
    }

    for (var i = 0; i < len; i++) {
        var code = str.charCodeAt(i);
        var refCode = refStr.charCodeAt(i);

        if (code >= 65 && code <= 90) {
            code = code | 32;
        }

        if (code !== refCode) {
            return false;
        }
    }

    return true;
}

/**
 * Case sensitive compare strings
 * @param str - input string
 * @param refStr - reference string
 */
function scmpStr(str, refStr) {
    //return str === refStr;
    var len = refStr.length;

    if (len !== str.length) {
        return false;
    }

    for (var i = 0; i < len; i++) {

        if (str.charCodeAt(i) !== refStr.charCodeAt(i)) {
            return false;
        }
    }

    return true;
}

/**
 * Export helpers
 */
exports.formatInt = formatInt;
exports.formatValue = formatValue;
exports.remRegexp = remRegexp;
exports.getUnit = getUnit;
exports.isHas = isHas;
exports.extend = extend;
exports.toCamelCase = toCamelCase;
exports.toKebabCase = toKebabCase;
exports.hasNumber = hasNumber;
exports.safeUint8Array = safeUint8Array;
exports.cmpStr = cmpStr;
exports.scmpStr = scmpStr;
exports.UNIT = UNIT;
exports.unitName = unitName;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
